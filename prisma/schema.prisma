datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  posts         Post[]
  comments      Comment[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post{
  postId        String @unique @default(cuid())
  title         String
  description   String?
  images        PostImage[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  comments      Comment[]

  user User @relation(fields: [userId], references: [id])



}

model PostImage {
  id          String @unique @default(cuid())
  post        Post? @relation(fields: [postId], references: [postId])
  postId      String
  thumbnail   String
}

model Comment {
  id        String @unique @default(cuid())
  postId    String
  authorId  String

  author User @relation(fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [postId])
}
